{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nvar _excluded = [\"uri\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { PermissionStatus, SyntheticPlatformEmitter } from 'expo-modules-core';\nimport { RecordingOptionsPresets } from \"./Audio/RecordingConstants\";\nfunction getPermissionWithQueryAsync(_x) {\n  return _getPermissionWithQueryAsync.apply(this, arguments);\n}\nfunction _getPermissionWithQueryAsync() {\n  _getPermissionWithQueryAsync = _asyncToGenerator(function* (name) {\n    if (!navigator || !navigator.permissions || !navigator.permissions.query) return null;\n    try {\n      var _yield$navigator$perm = yield navigator.permissions.query({\n          name: name\n        }),\n        state = _yield$navigator$perm.state;\n      switch (state) {\n        case 'granted':\n          return PermissionStatus.GRANTED;\n        case 'denied':\n          return PermissionStatus.DENIED;\n        default:\n          return PermissionStatus.UNDETERMINED;\n      }\n    } catch (_unused2) {\n      return PermissionStatus.UNDETERMINED;\n    }\n  });\n  return _getPermissionWithQueryAsync.apply(this, arguments);\n}\nfunction getUserMedia(constraints) {\n  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n    return navigator.mediaDevices.getUserMedia(constraints);\n  }\n  var getUserMedia =\n  navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || function () {\n    var error = new Error('Permission unimplemented');\n    error.code = 0;\n    error.name = 'NotAllowedError';\n    throw error;\n  };\n  return new Promise(function (resolve, reject) {\n    getUserMedia.call(navigator, constraints, resolve, reject);\n  });\n}\nfunction getStatusFromMedia(media) {\n  if (!media) {\n    return {\n      isLoaded: false,\n      error: undefined\n    };\n  }\n  var isPlaying = !!(media.currentTime > 0 && !media.paused && !media.ended && media.readyState > 2);\n  var status = {\n    isLoaded: true,\n    uri: media.src,\n    progressUpdateIntervalMillis: 100,\n    durationMillis: media.duration * 1000,\n    positionMillis: media.currentTime * 1000,\n    shouldPlay: media.autoplay,\n    isPlaying: isPlaying,\n    isBuffering: false,\n    rate: media.playbackRate,\n    shouldCorrectPitch: false,\n    volume: media.volume,\n    audioPan: 0,\n    isMuted: media.muted,\n    isLooping: media.loop,\n    didJustFinish: media.ended\n  };\n  return status;\n}\nfunction setStatusForMedia(media, status) {\n  if (status.positionMillis !== undefined) {\n    media.currentTime = status.positionMillis / 1000;\n  }\n  if (status.shouldPlay !== undefined) {\n    if (status.shouldPlay) {\n      media.play();\n    } else {\n      media.pause();\n    }\n  }\n  if (status.rate !== undefined) {\n    media.playbackRate = status.rate;\n  }\n  if (status.volume !== undefined) {\n    media.volume = status.volume;\n  }\n  if (status.isMuted !== undefined) {\n    media.muted = status.isMuted;\n  }\n  if (status.isLooping !== undefined) {\n    media.loop = status.isLooping;\n  }\n  return getStatusFromMedia(media);\n}\nvar mediaRecorder = null;\nvar mediaRecorderUptimeOfLastStartResume = 0;\nvar mediaRecorderDurationAlreadyRecorded = 0;\nvar mediaRecorderIsRecording = false;\nfunction getAudioRecorderDurationMillis() {\n  var duration = mediaRecorderDurationAlreadyRecorded;\n  if (mediaRecorderIsRecording && mediaRecorderUptimeOfLastStartResume > 0) {\n    duration += Date.now() - mediaRecorderUptimeOfLastStartResume;\n  }\n  return duration;\n}\nexport default {\n  get name() {\n    return 'ExponentAV';\n  },\n  getStatusForVideo: function () {\n    var _getStatusForVideo = _asyncToGenerator(function* (element) {\n      return getStatusFromMedia(element);\n    });\n    function getStatusForVideo(_x2) {\n      return _getStatusForVideo.apply(this, arguments);\n    }\n    return getStatusForVideo;\n  }(),\n  loadForVideo: function () {\n    var _loadForVideo = _asyncToGenerator(function* (element, nativeSource, fullInitialStatus) {\n      return getStatusFromMedia(element);\n    });\n    function loadForVideo(_x3, _x4, _x5) {\n      return _loadForVideo.apply(this, arguments);\n    }\n    return loadForVideo;\n  }(),\n  unloadForVideo: function () {\n    var _unloadForVideo = _asyncToGenerator(function* (element) {\n      return getStatusFromMedia(element);\n    });\n    function unloadForVideo(_x6) {\n      return _unloadForVideo.apply(this, arguments);\n    }\n    return unloadForVideo;\n  }(),\n  setStatusForVideo: function () {\n    var _setStatusForVideo = _asyncToGenerator(function* (element, status) {\n      return setStatusForMedia(element, status);\n    });\n    function setStatusForVideo(_x7, _x8) {\n      return _setStatusForVideo.apply(this, arguments);\n    }\n    return setStatusForVideo;\n  }(),\n  replayVideo: function () {\n    var _replayVideo = _asyncToGenerator(function* (element, status) {\n      return setStatusForMedia(element, status);\n    });\n    function replayVideo(_x9, _x10) {\n      return _replayVideo.apply(this, arguments);\n    }\n    return replayVideo;\n  }(),\n  setAudioMode: function () {\n    var _setAudioMode = _asyncToGenerator(function* () {});\n    function setAudioMode() {\n      return _setAudioMode.apply(this, arguments);\n    }\n    return setAudioMode;\n  }(),\n  setAudioIsEnabled: function () {\n    var _setAudioIsEnabled = _asyncToGenerator(function* () {});\n    function setAudioIsEnabled() {\n      return _setAudioIsEnabled.apply(this, arguments);\n    }\n    return setAudioIsEnabled;\n  }(),\n  getStatusForSound: function () {\n    var _getStatusForSound = _asyncToGenerator(function* (element) {\n      return getStatusFromMedia(element);\n    });\n    function getStatusForSound(_x11) {\n      return _getStatusForSound.apply(this, arguments);\n    }\n    return getStatusForSound;\n  }(),\n  loadForSound: function () {\n    var _loadForSound = _asyncToGenerator(function* (nativeSource, fullInitialStatus) {\n      var source = typeof nativeSource === 'string' ? nativeSource : nativeSource.uri;\n      var media = new Audio(source);\n      media.ontimeupdate = function () {\n        SyntheticPlatformEmitter.emit('didUpdatePlaybackStatus', {\n          key: media,\n          status: getStatusFromMedia(media)\n        });\n      };\n      media.onerror = function () {\n        SyntheticPlatformEmitter.emit('ExponentAV.onError', {\n          key: media,\n          error: media.error.message\n        });\n      };\n      var status = setStatusForMedia(media, fullInitialStatus);\n      return [media, status];\n    });\n    function loadForSound(_x12, _x13) {\n      return _loadForSound.apply(this, arguments);\n    }\n    return loadForSound;\n  }(),\n  unloadForSound: function () {\n    var _unloadForSound = _asyncToGenerator(function* (element) {\n      element.pause();\n      element.removeAttribute('src');\n      element.load();\n      return getStatusFromMedia(element);\n    });\n    function unloadForSound(_x14) {\n      return _unloadForSound.apply(this, arguments);\n    }\n    return unloadForSound;\n  }(),\n  setStatusForSound: function () {\n    var _setStatusForSound = _asyncToGenerator(function* (element, status) {\n      return setStatusForMedia(element, status);\n    });\n    function setStatusForSound(_x15, _x16) {\n      return _setStatusForSound.apply(this, arguments);\n    }\n    return setStatusForSound;\n  }(),\n  replaySound: function () {\n    var _replaySound = _asyncToGenerator(function* (element, status) {\n      return setStatusForMedia(element, status);\n    });\n    function replaySound(_x17, _x18) {\n      return _replaySound.apply(this, arguments);\n    }\n    return replaySound;\n  }(),\n  getAudioRecordingStatus: function () {\n    var _getAudioRecordingStatus = _asyncToGenerator(function* () {\n      var _mediaRecorder, _mediaRecorder2, _mediaRecorder3;\n      return {\n        canRecord: ((_mediaRecorder = mediaRecorder) == null ? void 0 : _mediaRecorder.state) === 'recording' || ((_mediaRecorder2 = mediaRecorder) == null ? void 0 : _mediaRecorder2.state) === 'inactive',\n        isRecording: ((_mediaRecorder3 = mediaRecorder) == null ? void 0 : _mediaRecorder3.state) === 'recording',\n        isDoneRecording: false,\n        durationMillis: getAudioRecorderDurationMillis(),\n        uri: null\n      };\n    });\n    function getAudioRecordingStatus() {\n      return _getAudioRecordingStatus.apply(this, arguments);\n    }\n    return getAudioRecordingStatus;\n  }(),\n  prepareAudioRecorder: function () {\n    var _prepareAudioRecorder = _asyncToGenerator(function* (options) {\n      if (typeof navigator !== 'undefined' && !navigator.mediaDevices) {\n        throw new Error('No media devices available');\n      }\n      mediaRecorderUptimeOfLastStartResume = 0;\n      mediaRecorderDurationAlreadyRecorded = 0;\n      var stream = yield getUserMedia({\n        audio: true\n      });\n      mediaRecorder = new window.MediaRecorder(stream, (options == null ? void 0 : options.web) || RecordingOptionsPresets.HIGH_QUALITY.web);\n      mediaRecorder.addEventListener('pause', function () {\n        mediaRecorderDurationAlreadyRecorded = getAudioRecorderDurationMillis();\n        mediaRecorderIsRecording = false;\n      });\n      mediaRecorder.addEventListener('resume', function () {\n        mediaRecorderUptimeOfLastStartResume = Date.now();\n        mediaRecorderIsRecording = true;\n      });\n      mediaRecorder.addEventListener('start', function () {\n        mediaRecorderUptimeOfLastStartResume = Date.now();\n        mediaRecorderDurationAlreadyRecorded = 0;\n        mediaRecorderIsRecording = true;\n      });\n      mediaRecorder.addEventListener('stop', function () {\n        mediaRecorderDurationAlreadyRecorded = getAudioRecorderDurationMillis();\n        mediaRecorderIsRecording = false;\n        stream.getTracks().forEach(function (track) {\n          return track.stop();\n        });\n      });\n      var _yield$this$getAudioR = yield this.getAudioRecordingStatus(),\n        uri = _yield$this$getAudioR.uri,\n        status = _objectWithoutProperties(_yield$this$getAudioR, _excluded);\n      return {\n        uri: null,\n        status: status\n      };\n    });\n    function prepareAudioRecorder(_x19) {\n      return _prepareAudioRecorder.apply(this, arguments);\n    }\n    return prepareAudioRecorder;\n  }(),\n  startAudioRecording: function () {\n    var _startAudioRecording = _asyncToGenerator(function* () {\n      if (mediaRecorder === null) {\n        throw new Error('Cannot start an audio recording without initializing a MediaRecorder. Run prepareToRecordAsync() before attempting to start an audio recording.');\n      }\n      if (mediaRecorder.state === 'paused') {\n        mediaRecorder.resume();\n      } else {\n        mediaRecorder.start();\n      }\n      return this.getAudioRecordingStatus();\n    });\n    function startAudioRecording() {\n      return _startAudioRecording.apply(this, arguments);\n    }\n    return startAudioRecording;\n  }(),\n  pauseAudioRecording: function () {\n    var _pauseAudioRecording = _asyncToGenerator(function* () {\n      if (mediaRecorder === null) {\n        throw new Error('Cannot start an audio recording without initializing a MediaRecorder. Run prepareToRecordAsync() before attempting to start an audio recording.');\n      }\n      mediaRecorder.pause();\n      return this.getAudioRecordingStatus();\n    });\n    function pauseAudioRecording() {\n      return _pauseAudioRecording.apply(this, arguments);\n    }\n    return pauseAudioRecording;\n  }(),\n  stopAudioRecording: function () {\n    var _stopAudioRecording = _asyncToGenerator(function* () {\n      if (mediaRecorder === null) {\n        throw new Error('Cannot start an audio recording without initializing a MediaRecorder. Run prepareToRecordAsync() before attempting to start an audio recording.');\n      }\n      if (mediaRecorder.state === 'inactive') {\n        return this.getAudioRecordingStatus();\n      }\n      var dataPromise = new Promise(function (resolve) {\n        return mediaRecorder.addEventListener('dataavailable', function (e) {\n          return resolve(e.data);\n        });\n      });\n      mediaRecorder.stop();\n      var data = yield dataPromise;\n      var url = URL.createObjectURL(data);\n      return _objectSpread(_objectSpread({}, yield this.getAudioRecordingStatus()), {}, {\n        uri: url\n      });\n    });\n    function stopAudioRecording() {\n      return _stopAudioRecording.apply(this, arguments);\n    }\n    return stopAudioRecording;\n  }(),\n  unloadAudioRecorder: function () {\n    var _unloadAudioRecorder = _asyncToGenerator(function* () {\n      mediaRecorder = null;\n    });\n    function unloadAudioRecorder() {\n      return _unloadAudioRecorder.apply(this, arguments);\n    }\n    return unloadAudioRecorder;\n  }(),\n  getPermissionsAsync: function () {\n    var _getPermissionsAsync = _asyncToGenerator(function* () {\n      var maybeStatus = yield getPermissionWithQueryAsync('microphone');\n      switch (maybeStatus) {\n        case PermissionStatus.GRANTED:\n          return {\n            status: PermissionStatus.GRANTED,\n            expires: 'never',\n            canAskAgain: true,\n            granted: true\n          };\n        case PermissionStatus.DENIED:\n          return {\n            status: PermissionStatus.DENIED,\n            expires: 'never',\n            canAskAgain: true,\n            granted: false\n          };\n        default:\n          return yield this.requestPermissionsAsync();\n      }\n    });\n    function getPermissionsAsync() {\n      return _getPermissionsAsync.apply(this, arguments);\n    }\n    return getPermissionsAsync;\n  }(),\n  requestPermissionsAsync: function () {\n    var _requestPermissionsAsync = _asyncToGenerator(function* () {\n      try {\n        var stream = yield getUserMedia({\n          audio: true\n        });\n        stream.getTracks().forEach(function (track) {\n          return track.stop();\n        });\n        return {\n          status: PermissionStatus.GRANTED,\n          expires: 'never',\n          canAskAgain: true,\n          granted: true\n        };\n      } catch (_unused) {\n        return {\n          status: PermissionStatus.DENIED,\n          expires: 'never',\n          canAskAgain: true,\n          granted: false\n        };\n      }\n    });\n    function requestPermissionsAsync() {\n      return _requestPermissionsAsync.apply(this, arguments);\n    }\n    return requestPermissionsAsync;\n  }()\n};","map":{"version":3,"sources":["../src/ExponentAV.web.ts"],"names":[],"mappings":"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","sourcesContent":["import { PermissionResponse, PermissionStatus, SyntheticPlatformEmitter } from 'expo-modules-core';\n\nimport type { AVPlaybackNativeSource, AVPlaybackStatus, AVPlaybackStatusToSet } from './AV.types';\nimport type { RecordingStatus } from './Audio/Recording.types';\nimport { RecordingOptionsPresets } from './Audio/RecordingConstants';\n\nasync function getPermissionWithQueryAsync(\n  name: PermissionNameWithAdditionalValues\n): Promise<PermissionStatus | null> {\n  if (!navigator || !navigator.permissions || !navigator.permissions.query) return null;\n\n  try {\n    const { state } = await navigator.permissions.query({ name });\n    switch (state) {\n      case 'granted':\n        return PermissionStatus.GRANTED;\n      case 'denied':\n        return PermissionStatus.DENIED;\n      default:\n        return PermissionStatus.UNDETERMINED;\n    }\n  } catch {\n    // Firefox - TypeError: 'microphone' (value of 'name' member of PermissionDescriptor) is not a valid value for enumeration PermissionName.\n    return PermissionStatus.UNDETERMINED;\n  }\n}\n\nfunction getUserMedia(constraints: MediaStreamConstraints): Promise<MediaStream> {\n  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n    return navigator.mediaDevices.getUserMedia(constraints);\n  }\n\n  // Some browsers partially implement mediaDevices. We can't just assign an object\n  // with getUserMedia as it would overwrite existing properties.\n  // Here, we will just add the getUserMedia property if it's missing.\n\n  // First get ahold of the legacy getUserMedia, if present\n  const getUserMedia =\n    // TODO: this method is deprecated, migrate to https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\n    navigator.getUserMedia ||\n    navigator.webkitGetUserMedia ||\n    navigator.mozGetUserMedia ||\n    function () {\n      const error: any = new Error('Permission unimplemented');\n      error.code = 0;\n      error.name = 'NotAllowedError';\n      throw error;\n    };\n\n  return new Promise((resolve, reject) => {\n    getUserMedia.call(navigator, constraints, resolve, reject);\n  });\n}\n\nfunction getStatusFromMedia(media?: HTMLMediaElement): AVPlaybackStatus {\n  if (!media) {\n    return {\n      isLoaded: false,\n      error: undefined,\n    };\n  }\n\n  const isPlaying = !!(\n    media.currentTime > 0 &&\n    !media.paused &&\n    !media.ended &&\n    media.readyState > 2\n  );\n\n  const status: AVPlaybackStatus = {\n    isLoaded: true,\n    uri: media.src,\n    progressUpdateIntervalMillis: 100, //TODO: Bacon: Add interval between calls\n    durationMillis: media.duration * 1000,\n    positionMillis: media.currentTime * 1000,\n    // playableDurationMillis: media.buffered * 1000,\n    // seekMillisToleranceBefore?: number\n    // seekMillisToleranceAfter?: number\n    shouldPlay: media.autoplay,\n    isPlaying,\n    isBuffering: false, //media.waiting,\n    rate: media.playbackRate,\n    // TODO: Bacon: This seems too complicated right now: https://webaudio.github.io/web-audio-api/#dom-biquadfilternode-frequency\n    shouldCorrectPitch: false,\n    volume: media.volume,\n    audioPan: 0,\n    isMuted: media.muted,\n    isLooping: media.loop,\n    didJustFinish: media.ended,\n  };\n\n  return status;\n}\n\nfunction setStatusForMedia(\n  media: HTMLMediaElement,\n  status: AVPlaybackStatusToSet\n): AVPlaybackStatus {\n  if (status.positionMillis !== undefined) {\n    media.currentTime = status.positionMillis / 1000;\n  }\n  // if (status.progressUpdateIntervalMillis !== undefined) {\n  //   media.progressUpdateIntervalMillis = status.progressUpdateIntervalMillis;\n  // }\n  // if (status.seekMillisToleranceBefore !== undefined) {\n  //   media.seekMillisToleranceBefore = status.seekMillisToleranceBefore;\n  // }\n  // if (status.seekMillisToleranceAfter !== undefined) {\n  //   media.seekMillisToleranceAfter = status.seekMillisToleranceAfter;\n  // }\n  // if (status.shouldCorrectPitch !== undefined) {\n  //   media.shouldCorrectPitch = status.shouldCorrectPitch;\n  // }\n  if (status.shouldPlay !== undefined) {\n    if (status.shouldPlay) {\n      media.play();\n    } else {\n      media.pause();\n    }\n  }\n  if (status.rate !== undefined) {\n    media.playbackRate = status.rate;\n  }\n  if (status.volume !== undefined) {\n    media.volume = status.volume;\n  }\n  if (status.isMuted !== undefined) {\n    media.muted = status.isMuted;\n  }\n  if (status.isLooping !== undefined) {\n    media.loop = status.isLooping;\n  }\n\n  return getStatusFromMedia(media);\n}\n\nlet mediaRecorder: null | any /*MediaRecorder*/ = null;\nlet mediaRecorderUptimeOfLastStartResume: number = 0;\nlet mediaRecorderDurationAlreadyRecorded: number = 0;\nlet mediaRecorderIsRecording: boolean = false;\n\nfunction getAudioRecorderDurationMillis() {\n  let duration = mediaRecorderDurationAlreadyRecorded;\n  if (mediaRecorderIsRecording && mediaRecorderUptimeOfLastStartResume > 0) {\n    duration += Date.now() - mediaRecorderUptimeOfLastStartResume;\n  }\n  return duration;\n}\n\nexport default {\n  get name(): string {\n    return 'ExponentAV';\n  },\n  async getStatusForVideo(element: HTMLMediaElement): Promise<AVPlaybackStatus> {\n    return getStatusFromMedia(element);\n  },\n  async loadForVideo(\n    element: HTMLMediaElement,\n    nativeSource: AVPlaybackNativeSource,\n    fullInitialStatus: AVPlaybackStatusToSet\n  ): Promise<AVPlaybackStatus> {\n    return getStatusFromMedia(element);\n  },\n  async unloadForVideo(element: HTMLMediaElement): Promise<AVPlaybackStatus> {\n    return getStatusFromMedia(element);\n  },\n  async setStatusForVideo(\n    element: HTMLMediaElement,\n    status: AVPlaybackStatusToSet\n  ): Promise<AVPlaybackStatus> {\n    return setStatusForMedia(element, status);\n  },\n  async replayVideo(\n    element: HTMLMediaElement,\n    status: AVPlaybackStatusToSet\n  ): Promise<AVPlaybackStatus> {\n    return setStatusForMedia(element, status);\n  },\n  /* Audio */\n  async setAudioMode() {},\n  async setAudioIsEnabled() {},\n  async getStatusForSound(element: HTMLMediaElement) {\n    return getStatusFromMedia(element);\n  },\n  async loadForSound(\n    nativeSource: string | { uri: string; [key: string]: any },\n    fullInitialStatus: AVPlaybackStatusToSet\n  ): Promise<[HTMLMediaElement, AVPlaybackStatus]> {\n    const source = typeof nativeSource === 'string' ? nativeSource : nativeSource.uri;\n    const media = new Audio(source);\n\n    media.ontimeupdate = () => {\n      SyntheticPlatformEmitter.emit('didUpdatePlaybackStatus', {\n        key: media,\n        status: getStatusFromMedia(media),\n      });\n    };\n\n    media.onerror = () => {\n      SyntheticPlatformEmitter.emit('ExponentAV.onError', {\n        key: media,\n        error: media.error!.message,\n      });\n    };\n\n    const status = setStatusForMedia(media, fullInitialStatus);\n\n    return [media, status];\n  },\n  async unloadForSound(element: HTMLMediaElement) {\n    element.pause();\n    element.removeAttribute('src');\n    element.load();\n    return getStatusFromMedia(element);\n  },\n  async setStatusForSound(\n    element: HTMLMediaElement,\n    status: AVPlaybackStatusToSet\n  ): Promise<AVPlaybackStatus> {\n    return setStatusForMedia(element, status);\n  },\n  async replaySound(\n    element: HTMLMediaElement,\n    status: AVPlaybackStatusToSet\n  ): Promise<AVPlaybackStatus> {\n    return setStatusForMedia(element, status);\n  },\n\n  /* Recording */\n  //   async setUnloadedCallbackForAndroidRecording() {},\n  async getAudioRecordingStatus(): Promise<RecordingStatus> {\n    return {\n      canRecord: mediaRecorder?.state === 'recording' || mediaRecorder?.state === 'inactive',\n      isRecording: mediaRecorder?.state === 'recording',\n      isDoneRecording: false,\n      durationMillis: getAudioRecorderDurationMillis(),\n      uri: null,\n    };\n  },\n  async prepareAudioRecorder(options): Promise<{\n    uri: string | null;\n    // status is of type RecordingStatus, but without the canRecord field populated\n    status: Pick<RecordingStatus, Exclude<keyof RecordingStatus, 'canRecord'>>;\n  }> {\n    if (typeof navigator !== 'undefined' && !navigator.mediaDevices) {\n      throw new Error('No media devices available');\n    }\n\n    mediaRecorderUptimeOfLastStartResume = 0;\n    mediaRecorderDurationAlreadyRecorded = 0;\n\n    const stream = await getUserMedia({ audio: true });\n\n    mediaRecorder = new (window as any).MediaRecorder(\n      stream,\n      options?.web || RecordingOptionsPresets.HIGH_QUALITY.web\n    );\n\n    mediaRecorder.addEventListener('pause', () => {\n      mediaRecorderDurationAlreadyRecorded = getAudioRecorderDurationMillis();\n      mediaRecorderIsRecording = false;\n    });\n\n    mediaRecorder.addEventListener('resume', () => {\n      mediaRecorderUptimeOfLastStartResume = Date.now();\n      mediaRecorderIsRecording = true;\n    });\n\n    mediaRecorder.addEventListener('start', () => {\n      mediaRecorderUptimeOfLastStartResume = Date.now();\n      mediaRecorderDurationAlreadyRecorded = 0;\n      mediaRecorderIsRecording = true;\n    });\n\n    mediaRecorder.addEventListener('stop', () => {\n      mediaRecorderDurationAlreadyRecorded = getAudioRecorderDurationMillis();\n      mediaRecorderIsRecording = false;\n\n      // Clears recording icon in Chrome tab\n      stream.getTracks().forEach((track) => track.stop());\n    });\n\n    const { uri, ...status } = await this.getAudioRecordingStatus();\n\n    return { uri: null, status };\n  },\n  async startAudioRecording(): Promise<RecordingStatus> {\n    if (mediaRecorder === null) {\n      throw new Error(\n        'Cannot start an audio recording without initializing a MediaRecorder. Run prepareToRecordAsync() before attempting to start an audio recording.'\n      );\n    }\n\n    if (mediaRecorder.state === 'paused') {\n      mediaRecorder.resume();\n    } else {\n      mediaRecorder.start();\n    }\n\n    return this.getAudioRecordingStatus();\n  },\n  async pauseAudioRecording(): Promise<RecordingStatus> {\n    if (mediaRecorder === null) {\n      throw new Error(\n        'Cannot start an audio recording without initializing a MediaRecorder. Run prepareToRecordAsync() before attempting to start an audio recording.'\n      );\n    }\n\n    // Set status to paused\n    mediaRecorder.pause();\n\n    return this.getAudioRecordingStatus();\n  },\n  async stopAudioRecording(): Promise<RecordingStatus> {\n    if (mediaRecorder === null) {\n      throw new Error(\n        'Cannot start an audio recording without initializing a MediaRecorder. Run prepareToRecordAsync() before attempting to start an audio recording.'\n      );\n    }\n\n    if (mediaRecorder.state === 'inactive') {\n      return this.getAudioRecordingStatus();\n    }\n\n    const dataPromise = new Promise<Blob>((resolve) =>\n      mediaRecorder.addEventListener('dataavailable', (e) => resolve(e.data))\n    );\n\n    mediaRecorder.stop();\n\n    const data = await dataPromise;\n    const url = URL.createObjectURL(data);\n\n    return {\n      ...(await this.getAudioRecordingStatus()),\n      uri: url,\n    };\n  },\n  async unloadAudioRecorder(): Promise<void> {\n    mediaRecorder = null;\n  },\n\n  async getPermissionsAsync(): Promise<PermissionResponse> {\n    const maybeStatus = await getPermissionWithQueryAsync('microphone');\n    switch (maybeStatus) {\n      case PermissionStatus.GRANTED:\n        return {\n          status: PermissionStatus.GRANTED,\n          expires: 'never',\n          canAskAgain: true,\n          granted: true,\n        };\n      case PermissionStatus.DENIED:\n        return {\n          status: PermissionStatus.DENIED,\n          expires: 'never',\n          canAskAgain: true,\n          granted: false,\n        };\n      default:\n        return await this.requestPermissionsAsync();\n    }\n  },\n  async requestPermissionsAsync(): Promise<PermissionResponse> {\n    try {\n      const stream = await getUserMedia({ audio: true });\n      stream.getTracks().forEach((track) => track.stop());\n      return {\n        status: PermissionStatus.GRANTED,\n        expires: 'never',\n        canAskAgain: true,\n        granted: true,\n      };\n    } catch {\n      return {\n        status: PermissionStatus.DENIED,\n        expires: 'never',\n        canAskAgain: true,\n        granted: false,\n      };\n    }\n  },\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}