{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport * as React from 'react';\nimport createElement from 'react-native-web/dist/exports/createElement';\nimport ExponentAV from \"./ExponentAV\";\nimport { addFullscreenListener } from \"./FullscreenUtils.web\";\nimport { VideoFullscreenUpdate } from \"./Video.types\";\nvar Video = React.forwardRef(function (props, ref) {\n  return createElement('video', _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref\n  }));\n});\nvar ExponentVideo = function (_React$Component) {\n  _inherits(ExponentVideo, _React$Component);\n  var _super = _createSuper(ExponentVideo);\n  function ExponentVideo() {\n    var _this;\n    _classCallCheck(this, ExponentVideo);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.onFullscreenChange = function (isFullscreen) {\n      if (!_this.props.onFullscreenUpdate) return;\n      if (isFullscreen) {\n        _this.props.onFullscreenUpdate({\n          nativeEvent: {\n            fullscreenUpdate: VideoFullscreenUpdate.PLAYER_DID_PRESENT\n          }\n        });\n      } else {\n        _this.props.onFullscreenUpdate({\n          nativeEvent: {\n            fullscreenUpdate: VideoFullscreenUpdate.PLAYER_DID_DISMISS\n          }\n        });\n      }\n    };\n    _this.onStatusUpdate = _asyncToGenerator(function* () {\n      if (!_this.props.onStatusUpdate) {\n        return;\n      }\n      var nativeEvent = yield ExponentAV.getStatusForVideo(_this._video);\n      _this.props.onStatusUpdate({\n        nativeEvent: nativeEvent\n      });\n    });\n    _this.onLoadStart = function () {\n      if (!_this.props.onLoadStart) {\n        return;\n      }\n      _this.props.onLoadStart();\n      _this.onStatusUpdate();\n    };\n    _this.onLoadedData = function (event) {\n      if (!_this.props.onLoad) {\n        return;\n      }\n      _this.props.onLoad(event);\n      _this.onStatusUpdate();\n    };\n    _this.onError = function (event) {\n      if (!_this.props.onError) {\n        return;\n      }\n      _this.props.onError(event);\n      _this.onStatusUpdate();\n    };\n    _this.onProgress = function () {\n      _this.onStatusUpdate();\n    };\n    _this.onSeeking = function () {\n      _this.onStatusUpdate();\n    };\n    _this.onEnded = function () {\n      _this.onStatusUpdate();\n    };\n    _this.onLoadedMetadata = function () {\n      _this.onStatusUpdate();\n    };\n    _this.onCanPlay = function (event) {\n      if (!_this.props.onReadyForDisplay) {\n        return;\n      }\n      _this.props.onReadyForDisplay(event);\n      _this.onStatusUpdate();\n    };\n    _this.onStalled = function () {\n      _this.onStatusUpdate();\n    };\n    _this.onRef = function (ref) {\n      _this._removeFullscreenListener == null ? void 0 : _this._removeFullscreenListener();\n      if (ref) {\n        _this._video = ref;\n        _this._removeFullscreenListener = addFullscreenListener(_this._video, _this.onFullscreenChange);\n        _this.onStatusUpdate();\n      } else {\n        _this._removeFullscreenListener = undefined;\n      }\n    };\n    return _this;\n  }\n  _createClass(ExponentVideo, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var _this$_removeFullscre;\n      (_this$_removeFullscre = this._removeFullscreenListener) == null ? void 0 : _this$_removeFullscre.call(this);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n        source = _this$props.source,\n        _this$props$status = _this$props.status,\n        status = _this$props$status === void 0 ? {} : _this$props$status,\n        objectFit = _this$props.resizeMode,\n        useNativeControls = _this$props.useNativeControls,\n        style = _this$props.style;\n      var customStyle = {\n        position: undefined,\n        objectFit: objectFit,\n        overflow: 'hidden'\n      };\n      return React.createElement(Video, {\n        ref: this.onRef,\n        onLoadStart: this.onLoadStart,\n        onLoadedData: this.onLoadedData,\n        onError: this.onError,\n        onTimeUpdate: this.onProgress,\n        onSeeking: this.onSeeking,\n        onEnded: this.onEnded,\n        onLoadedMetadata: this.onLoadedMetadata,\n        onCanPlay: this.onCanPlay,\n        onStalled: this.onStalled,\n        src: (source == null ? void 0 : source.uri) || undefined,\n        muted: status.isMuted,\n        loop: status.isLooping,\n        autoPlay: status.shouldPlay,\n        controls: useNativeControls,\n        style: [style, customStyle],\n        playsInline: true\n      });\n    }\n  }]);\n  return ExponentVideo;\n}(React.Component);\nexport { ExponentVideo as default };","map":{"version":3,"sources":["../src/ExponentVideo.web.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { ViewProps } from 'react-native';\nimport createElement from 'react-native-web/dist/exports/createElement';\n\nimport { AVPlaybackNativeSource, AVPlaybackStatus, AVPlaybackStatusToSet } from './AV';\nimport ExponentAV from './ExponentAV';\nimport { addFullscreenListener } from './FullscreenUtils.web';\nimport {\n  VideoFullscreenUpdate,\n  VideoFullscreenUpdateEvent,\n  VideoReadyForDisplayEvent,\n} from './Video.types';\n\ntype ExponentVideoProps = {\n  source: AVPlaybackNativeSource | null;\n  resizeMode?: object;\n  status?: AVPlaybackStatusToSet;\n  useNativeControls?: boolean;\n  onStatusUpdate?: (event: { nativeEvent: AVPlaybackStatus }) => void;\n  onReadyForDisplay?: (event: { nativeEvent: VideoReadyForDisplayEvent }) => void;\n  onFullscreenUpdate?: (event: { nativeEvent: VideoFullscreenUpdateEvent }) => void;\n  onLoadStart: () => void;\n  onLoad: (event: { nativeEvent: AVPlaybackStatus }) => void;\n  onError: (event: { nativeEvent: { error: string } }) => void;\n  // Required by react-native\n  scaleX?: number;\n  scaleY?: number;\n  translateX?: number;\n  translateY?: number;\n  rotation?: number;\n} & ViewProps;\n\nexport type NaturalSize = {\n  width: number;\n  height: number;\n  orientation: 'portrait' | 'landscape';\n};\n\nconst Video: any = React.forwardRef<HTMLVideoElement, ExponentVideoProps>((props, ref) =>\n  createElement('video', { ...props, ref })\n);\n\nexport default class ExponentVideo extends React.Component<ExponentVideoProps> {\n  _video?: HTMLVideoElement;\n  _removeFullscreenListener?: () => any;\n\n  componentWillUnmount() {\n    this._removeFullscreenListener?.();\n  }\n\n  onFullscreenChange = (isFullscreen: boolean) => {\n    if (!this.props.onFullscreenUpdate) return;\n    if (isFullscreen) {\n      this.props.onFullscreenUpdate({\n        nativeEvent: { fullscreenUpdate: VideoFullscreenUpdate.PLAYER_DID_PRESENT },\n      });\n    } else {\n      this.props.onFullscreenUpdate({\n        nativeEvent: { fullscreenUpdate: VideoFullscreenUpdate.PLAYER_DID_DISMISS },\n      });\n    }\n  };\n\n  onStatusUpdate = async () => {\n    if (!this.props.onStatusUpdate) {\n      return;\n    }\n    const nativeEvent = await ExponentAV.getStatusForVideo(this._video);\n    this.props.onStatusUpdate({ nativeEvent });\n  };\n\n  onLoadStart = () => {\n    if (!this.props.onLoadStart) {\n      return;\n    }\n    this.props.onLoadStart();\n    this.onStatusUpdate();\n  };\n\n  onLoadedData = (event) => {\n    if (!this.props.onLoad) {\n      return;\n    }\n    this.props.onLoad(event);\n    this.onStatusUpdate();\n  };\n\n  onError = (event) => {\n    if (!this.props.onError) {\n      return;\n    }\n    this.props.onError(event);\n    this.onStatusUpdate();\n  };\n\n  onProgress = () => {\n    this.onStatusUpdate();\n  };\n\n  onSeeking = () => {\n    this.onStatusUpdate();\n  };\n\n  onEnded = () => {\n    this.onStatusUpdate();\n  };\n\n  onLoadedMetadata = () => {\n    this.onStatusUpdate();\n  };\n\n  onCanPlay = (event) => {\n    if (!this.props.onReadyForDisplay) {\n      return;\n    }\n    this.props.onReadyForDisplay(event);\n    this.onStatusUpdate();\n  };\n\n  onStalled = () => {\n    this.onStatusUpdate();\n  };\n\n  onRef = (ref: HTMLVideoElement | null) => {\n    this._removeFullscreenListener?.();\n    if (ref) {\n      this._video = ref;\n      this._removeFullscreenListener = addFullscreenListener(this._video, this.onFullscreenChange);\n      this.onStatusUpdate();\n    } else {\n      this._removeFullscreenListener = undefined;\n    }\n  };\n\n  render() {\n    const { source, status = {}, resizeMode: objectFit, useNativeControls, style } = this.props;\n\n    const customStyle = {\n      position: undefined,\n      objectFit,\n      overflow: 'hidden',\n    };\n    return (\n      <Video\n        ref={this.onRef}\n        onLoadStart={this.onLoadStart}\n        onLoadedData={this.onLoadedData}\n        onError={this.onError}\n        onTimeUpdate={this.onProgress}\n        onSeeking={this.onSeeking}\n        onEnded={this.onEnded}\n        onLoadedMetadata={this.onLoadedMetadata}\n        onCanPlay={this.onCanPlay}\n        onStalled={this.onStalled}\n        src={source?.uri || undefined}\n        muted={status.isMuted}\n        loop={status.isLooping}\n        autoPlay={status.shouldPlay}\n        controls={useNativeControls}\n        style={[style, customStyle]}\n        playsInline\n      />\n    );\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}