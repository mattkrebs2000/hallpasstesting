{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport ExponentAV from \"./ExponentAV\";\nimport { requestFullscreen, exitFullscreen } from \"./FullscreenUtils.web\";\nexport default {\n  get name() {\n    return 'ExpoVideoManager';\n  },\n  get ScaleNone() {\n    return 'none';\n  },\n  get ScaleToFill() {\n    return 'fill';\n  },\n  get ScaleAspectFit() {\n    return 'contain';\n  },\n  get ScaleAspectFill() {\n    return 'cover';\n  },\n  setFullscreen: function () {\n    var _setFullscreen = _asyncToGenerator(function* (element, isFullScreenEnabled) {\n      if (isFullScreenEnabled) {\n        yield requestFullscreen(element);\n      } else {\n        yield exitFullscreen(element);\n      }\n      return ExponentAV.getStatusForVideo(element);\n    });\n    function setFullscreen(_x, _x2) {\n      return _setFullscreen.apply(this, arguments);\n    }\n    return setFullscreen;\n  }()\n};","map":{"version":3,"sources":["../src/ExpoVideoManager.web.ts"],"names":[],"mappings":";AACA,OAAO,UAAU;AACjB,SAAS,iBAAiB,EAAE,cAAc;AAE1C,eAAe;EACb,IAAI,IAAI,GAAA;IACN,OAAO,kBAAkB;EAC3B,CAAC;EACD,IAAI,SAAS,GAAA;IACX,OAAO,MAAM;EACf,CAAC;EACD,IAAI,WAAW,GAAA;IACb,OAAO,MAAM;EACf,CAAC;EACD,IAAI,cAAc,GAAA;IAChB,OAAO,SAAS;EAClB,CAAC;EACD,IAAI,eAAe,GAAA;IACjB,OAAO,OAAO;EAChB,CAAC;EAEK,aAAa;IAAA,kDACjB,OAAyB,EACzB,mBAA4B,EAAA;MAE5B,IAAI,mBAAmB,EAAE;QACvB,MAAM,iBAAiB,CAAC,OAAO,CAAC;OACjC,MAAM;QACL,MAAM,cAAc,CAAC,OAAO,CAAC;MAC9B;MACD,OAAO,UAAU,CAAC,iBAAiB,CAAC,OAAO,CAAC;IAC9C,CAAC;IAAA;MAAA;IAAA;IAAA;EAAA;CACF","sourcesContent":["import { AVPlaybackStatus } from './AV';\nimport ExponentAV from './ExponentAV';\nimport { requestFullscreen, exitFullscreen } from './FullscreenUtils.web';\n\nexport default {\n  get name(): string {\n    return 'ExpoVideoManager';\n  },\n  get ScaleNone(): string {\n    return 'none';\n  },\n  get ScaleToFill(): string {\n    return 'fill';\n  },\n  get ScaleAspectFit(): string {\n    return 'contain';\n  },\n  get ScaleAspectFill(): string {\n    return 'cover';\n  },\n\n  async setFullscreen(\n    element: HTMLMediaElement,\n    isFullScreenEnabled: boolean\n  ): Promise<AVPlaybackStatus> {\n    if (isFullScreenEnabled) {\n      await requestFullscreen(element);\n    } else {\n      await exitFullscreen(element);\n    }\n    return ExponentAV.getStatusForVideo(element);\n  },\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}